LazyJavaClassDescriptor@0['Exception'] {
    typeConstructor = LazyJavaClassTypeConstructor@1['Exception']
}

LazyJavaClassDescriptor@2['IllegalStateException'] {
    constructors = ArrayList@3[4] { JavaConstructorDescriptor@4['<init>'], JavaConstructorDescriptor@5['<init>'], JavaConstructorDescriptor@6['<init>'], ... } // through LazyJavaClassMemberScope@7
    defaultType = JetTypeImpl@8['IllegalStateException']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@9['IllegalStateException']
}

LazyJavaClassDescriptor@10['RuntimeException'] {
    typeConstructor = LazyJavaClassTypeConstructor@11['RuntimeException']
}

LazyJavaClassTypeConstructor@1['Exception'] {
    parameters = ArrayList@12[empty]
    supertypes = ArrayList@13[1] { LazyJavaClassifierType@14['Throwable'] }
}

LazyJavaClassTypeConstructor@9['IllegalStateException'] {
    parameters = ArrayList@15[empty]
    supertypes = ArrayList@16[1] { LazyJavaClassifierType@17['RuntimeException'] }
}

LazyJavaClassTypeConstructor@11['RuntimeException'] {
    parameters = ArrayList@18[empty]
    supertypes = ArrayList@19[1] { LazyJavaClassifierType@20['Exception'] }
}

LazyJavaClassifierType@20['Exception'] {
    arguments = ArrayList@21[empty]
    classifier = JavaClassImpl@22['Exception']
    typeConstructor = LazyJavaClassTypeConstructor@1['Exception']
}

LazyJavaClassifierType@17['RuntimeException'] {
    arguments = ArrayList@23[empty]
    classifier = JavaClassImpl@24['RuntimeException']
    typeConstructor = LazyJavaClassTypeConstructor@11['RuntimeException']
}

LazyJavaClassifierType@25['String'] {
    arguments = ArrayList@26[empty]
    classifier = JavaClassImpl@27['String']
    nullable = 'false': Boolean@28
    typeConstructor = DeserializedClassTypeConstructor@29
}

LazyJavaClassifierType@30['String'] {
    arguments = ArrayList@31[empty]
    classifier = JavaClassImpl@32['String']
    nullable = 'false': Boolean@28
    typeConstructor = DeserializedClassTypeConstructor@29
}

LazyJavaClassifierType@33['String'] {
    arguments = ArrayList@34[empty]
    classifier = JavaClassImpl@32['String']
    nullable = 'true': Boolean@35
    typeConstructor = DeserializedClassTypeConstructor@29
}

LazyJavaClassifierType@36['String'] {
    arguments = ArrayList@37[empty]
    classifier = JavaClassImpl@27['String']
    nullable = 'true': Boolean@35
    typeConstructor = DeserializedClassTypeConstructor@29
}

LazyJavaClassifierType@38['Throwable'] {
    arguments = ArrayList@39[empty]
    classifier = JavaClassImpl@40['Throwable']
    nullable = 'false': Boolean@28
    typeConstructor = DeserializedClassTypeConstructor@41
}

LazyJavaClassifierType@42['Throwable'] {
    arguments = ArrayList@43[empty]
    classifier = JavaClassImpl@44['Throwable']
    nullable = 'false': Boolean@28
    typeConstructor = DeserializedClassTypeConstructor@41
}

LazyJavaClassifierType@45['Throwable'] {
    arguments = ArrayList@46[empty]
    classifier = JavaClassImpl@44['Throwable']
    nullable = 'true': Boolean@35
    typeConstructor = DeserializedClassTypeConstructor@41
}

LazyJavaClassifierType@47['Throwable'] {
    arguments = ArrayList@48[empty]
    classifier = JavaClassImpl@40['Throwable']
    nullable = 'true': Boolean@35
    typeConstructor = DeserializedClassTypeConstructor@41
}

LazyJavaClassifierType@14['Throwable'] {
    arguments = ArrayList@49[empty]
    classifier = JavaClassImpl@50['Throwable']
    typeConstructor = DeserializedClassTypeConstructor@41
}

LazyJavaPackageFragmentProvider@51 {
    packageFragments('<root>': FqName@52) = LazyJavaPackageFragment@53['<root>']
    packageFragments('In': FqName@54) = null
    packageFragments('Int': FqName@55) = null
    packageFragments('Inv': FqName@56) = null
    packageFragments('Out': FqName@57) = null
    packageFragments('String': FqName@58) = null
    packageFragments('T': FqName@59) = null
    packageFragments('Unit': FqName@60) = null
    packageFragments('java': FqName@61) = LazyJavaPackageFragment@62['java']
    packageFragments('java.lang': FqName@63) = LazyJavaPackageFragment@64['lang']
    packageFragments('java.lang.In': FqName@65) = null
    packageFragments('java.lang.Int': FqName@66) = null
    packageFragments('java.lang.Inv': FqName@67) = null
    packageFragments('java.lang.Out': FqName@68) = null
    packageFragments('java.lang.String': FqName@69) = null
    packageFragments('java.lang.T': FqName@70) = null
    packageFragments('java.lang.Unit': FqName@71) = null
    packageFragments('kotlin': FqName@72) = null
    packageFragments('kotlin.In': FqName@73) = null
    packageFragments('kotlin.Int': FqName@74) = null
    packageFragments('kotlin.Inv': FqName@75) = null
    packageFragments('kotlin.Out': FqName@76) = null
    packageFragments('kotlin.String': FqName@77) = null
    packageFragments('kotlin.T': FqName@78) = null
    packageFragments('kotlin.Unit': FqName@79) = null
    packageFragments('kotlin.io': FqName@80) = null
    packageFragments('kotlin.jvm': FqName@81) = null
    topLevelClasses(JavaClassImpl@22['Exception']) = LazyJavaClassDescriptor@0['Exception']
    topLevelClasses(JavaClassImpl@82['IllegalStateException']) = LazyJavaClassDescriptor@2['IllegalStateException']
    topLevelClasses(JavaClassImpl@24['RuntimeException']) = LazyJavaClassDescriptor@10['RuntimeException']
}

LazyJavaPackageFragment@53['<root>'] {
    classes('IllegalStateException': Name@83) = null // through LazyPackageFragmentScopeForJavaPackage@84
    classes('In': Name@85) = null // through LazyPackageFragmentScopeForJavaPackage@84
    classes('Int': Name@86) = null // through LazyPackageFragmentScopeForJavaPackage@84
    classes('Inv': Name@87) = null // through LazyPackageFragmentScopeForJavaPackage@84
    classes('Out': Name@88) = null // through LazyPackageFragmentScopeForJavaPackage@84
    classes('String': Name@89) = null // through LazyPackageFragmentScopeForJavaPackage@84
    classes('Unit': Name@90) = null // through LazyPackageFragmentScopeForJavaPackage@84
    classes('f': Name@91) = null // through LazyPackageFragmentScopeForJavaPackage@84
    classes('inf': Name@92) = null // through LazyPackageFragmentScopeForJavaPackage@84
    classes('outf': Name@93) = null // through LazyPackageFragmentScopeForJavaPackage@84
    deserializedPackageScope = Empty@94 // through LazyPackageFragmentScopeForJavaPackage@84
    functions('IllegalStateException': Name@83) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@84
    functions('In': Name@85) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@84
    functions('Inv': Name@87) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@84
    functions('Out': Name@88) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@84
    functions('f': Name@91) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@84
    functions('inf': Name@92) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@84
    functions('outf': Name@93) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@84
    memberIndex = computeMemberIndex$1@96 // through LazyPackageFragmentScopeForJavaPackage@84
}

LazyJavaPackageFragment@62['java'] {
    classes('lang': Name@97) = null // through LazyPackageFragmentScopeForJavaPackage@98
    deserializedPackageScope = Empty@94 // through LazyPackageFragmentScopeForJavaPackage@98
    functions('lang': Name@99) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@98
    memberIndex = computeMemberIndex$1@100 // through LazyPackageFragmentScopeForJavaPackage@98
}

LazyJavaPackageFragment@64['lang'] {
    classes('IllegalStateException': Name@83) = LazyJavaClassDescriptor@2['IllegalStateException'] // through LazyPackageFragmentScopeForJavaPackage@101
    classes('In': Name@85) = null // through LazyPackageFragmentScopeForJavaPackage@101
    classes('Inv': Name@87) = null // through LazyPackageFragmentScopeForJavaPackage@101
    classes('Out': Name@88) = null // through LazyPackageFragmentScopeForJavaPackage@101
    classes('f': Name@91) = null // through LazyPackageFragmentScopeForJavaPackage@101
    classes('inf': Name@92) = null // through LazyPackageFragmentScopeForJavaPackage@101
    classes('outf': Name@93) = null // through LazyPackageFragmentScopeForJavaPackage@101
    deserializedPackageScope = Empty@94 // through LazyPackageFragmentScopeForJavaPackage@101
    functions('IllegalStateException': Name@83) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@101
    functions('In': Name@85) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@101
    functions('Inv': Name@87) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@101
    functions('Out': Name@88) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@101
    functions('f': Name@91) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@101
    functions('inf': Name@92) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@101
    functions('outf': Name@93) = EmptyList@95[empty] // through LazyPackageFragmentScopeForJavaPackage@101
    memberIndex = computeMemberIndex$1@102 // through LazyPackageFragmentScopeForJavaPackage@101
}
