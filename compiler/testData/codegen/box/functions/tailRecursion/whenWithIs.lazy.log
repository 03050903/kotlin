LazyAnnotationDescriptor@0 {
    resolutionResults = OverloadResolutionResultsImpl@1
    type = JetTypeImpl@2['tailRecursive']
}

LazyJavaClassDescriptor@3['Exception'] {
    typeConstructor = LazyJavaClassTypeConstructor@4['Exception']
}

LazyJavaClassDescriptor@5['IllegalStateException'] {
    constructors = ArrayList@6[4] { JavaConstructorDescriptor@7['<init>'], JavaConstructorDescriptor@8['<init>'], JavaConstructorDescriptor@9['<init>'], ... } // through LazyJavaClassMemberScope@10
    defaultType = JetTypeImpl@11['IllegalStateException']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@12['IllegalStateException']
}

LazyJavaClassDescriptor@13['RuntimeException'] {
    typeConstructor = LazyJavaClassTypeConstructor@14['RuntimeException']
}

LazyJavaClassTypeConstructor@4['Exception'] {
    parameters = ArrayList@15[empty]
    supertypes = ArrayList@16[1] { LazyJavaClassifierType@17['Throwable'] }
}

LazyJavaClassTypeConstructor@12['IllegalStateException'] {
    parameters = ArrayList@18[empty]
    supertypes = ArrayList@19[1] { LazyJavaClassifierType@20['RuntimeException'] }
}

LazyJavaClassTypeConstructor@14['RuntimeException'] {
    parameters = ArrayList@21[empty]
    supertypes = ArrayList@22[1] { LazyJavaClassifierType@23['Exception'] }
}

LazyJavaClassifierType@23['Exception'] {
    arguments = ArrayList@24[empty]
    classifier = JavaClassImpl@25['Exception']
    typeConstructor = LazyJavaClassTypeConstructor@4['Exception']
}

LazyJavaClassifierType@20['RuntimeException'] {
    arguments = ArrayList@26[empty]
    classifier = JavaClassImpl@27['RuntimeException']
    typeConstructor = LazyJavaClassTypeConstructor@14['RuntimeException']
}

LazyJavaClassifierType@28['String'] {
    arguments = ArrayList@29[empty]
    classifier = JavaClassImpl@30['String']
    nullable = 'false': Boolean@31
    typeConstructor = DeserializedClassTypeConstructor@32
}

LazyJavaClassifierType@33['String'] {
    arguments = ArrayList@34[empty]
    classifier = JavaClassImpl@35['String']
    nullable = 'false': Boolean@31
    typeConstructor = DeserializedClassTypeConstructor@32
}

LazyJavaClassifierType@36['String'] {
    arguments = ArrayList@37[empty]
    classifier = JavaClassImpl@30['String']
    nullable = 'true': Boolean@38
    typeConstructor = DeserializedClassTypeConstructor@32
}

LazyJavaClassifierType@39['String'] {
    arguments = ArrayList@40[empty]
    classifier = JavaClassImpl@35['String']
    nullable = 'true': Boolean@38
    typeConstructor = DeserializedClassTypeConstructor@32
}

LazyJavaClassifierType@41['Throwable'] {
    arguments = ArrayList@42[empty]
    classifier = JavaClassImpl@43['Throwable']
    nullable = 'false': Boolean@31
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@45['Throwable'] {
    arguments = ArrayList@46[empty]
    classifier = JavaClassImpl@47['Throwable']
    nullable = 'false': Boolean@31
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@48['Throwable'] {
    arguments = ArrayList@49[empty]
    classifier = JavaClassImpl@47['Throwable']
    nullable = 'true': Boolean@38
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@50['Throwable'] {
    arguments = ArrayList@51[empty]
    classifier = JavaClassImpl@43['Throwable']
    nullable = 'true': Boolean@38
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@17['Throwable'] {
    arguments = ArrayList@52[empty]
    classifier = JavaClassImpl@53['Throwable']
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaPackageFragmentProvider@54 {
    packageFragments('<root>': FqName@55) = LazyJavaPackageFragment@56['<root>']
    packageFragments('Any': FqName@57) = null
    packageFragments('Int': FqName@58) = null
    packageFragments('Number': FqName@59) = null
    packageFragments('String': FqName@60) = null
    packageFragments('java': FqName@61) = LazyJavaPackageFragment@62['java']
    packageFragments('java.lang': FqName@63) = LazyJavaPackageFragment@64['lang']
    packageFragments('java.lang.Any': FqName@65) = null
    packageFragments('java.lang.Int': FqName@66) = null
    packageFragments('java.lang.Number': FqName@67) = null
    packageFragments('java.lang.String': FqName@68) = null
    packageFragments('java.lang.tailRecursive': FqName@69) = null
    packageFragments('kotlin': FqName@70) = null
    packageFragments('kotlin.Any': FqName@71) = null
    packageFragments('kotlin.Int': FqName@72) = null
    packageFragments('kotlin.Number': FqName@73) = null
    packageFragments('kotlin.String': FqName@74) = null
    packageFragments('kotlin.io': FqName@75) = null
    packageFragments('kotlin.jvm': FqName@76) = null
    packageFragments('kotlin.tailRecursive': FqName@77) = null
    packageFragments('tailRecursive': FqName@78) = null
    topLevelClasses(JavaClassImpl@25['Exception']) = LazyJavaClassDescriptor@3['Exception']
    topLevelClasses(JavaClassImpl@79['IllegalStateException']) = LazyJavaClassDescriptor@5['IllegalStateException']
    topLevelClasses(JavaClassImpl@27['RuntimeException']) = LazyJavaClassDescriptor@13['RuntimeException']
}

LazyJavaPackageFragment@56['<root>'] {
    classes('Any': Name@80) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('IllegalStateException': Name@82) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('Int': Name@83) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('Number': Name@84) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('String': Name@85) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('equals': Name@86) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('minus': Name@87) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('tailRecursive': Name@88) = null // through LazyPackageFragmentScopeForJavaPackage@81
    classes('withWhen': Name@89) = null // through LazyPackageFragmentScopeForJavaPackage@81
    deserializedPackageScope = Empty@90 // through LazyPackageFragmentScopeForJavaPackage@81
    functions('IllegalStateException': Name@82) = EmptyList@91[empty] // through LazyPackageFragmentScopeForJavaPackage@81
    functions('equals': Name@86) = EmptyList@91[empty] // through LazyPackageFragmentScopeForJavaPackage@81
    functions('minus': Name@87) = EmptyList@91[empty] // through LazyPackageFragmentScopeForJavaPackage@81
    functions('withWhen': Name@89) = EmptyList@91[empty] // through LazyPackageFragmentScopeForJavaPackage@81
    memberIndex = computeMemberIndex$1@92 // through LazyPackageFragmentScopeForJavaPackage@81
}

LazyJavaPackageFragment@62['java'] {
    classes('lang': Name@93) = null // through LazyPackageFragmentScopeForJavaPackage@94
    deserializedPackageScope = Empty@90 // through LazyPackageFragmentScopeForJavaPackage@94
    functions('lang': Name@95) = EmptyList@91[empty] // through LazyPackageFragmentScopeForJavaPackage@94
    memberIndex = computeMemberIndex$1@96 // through LazyPackageFragmentScopeForJavaPackage@94
}

LazyJavaPackageFragment@64['lang'] {
    classes('IllegalStateException': Name@82) = LazyJavaClassDescriptor@5['IllegalStateException'] // through LazyPackageFragmentScopeForJavaPackage@97
    classes('equals': Name@86) = null // through LazyPackageFragmentScopeForJavaPackage@97
    classes('minus': Name@87) = null // through LazyPackageFragmentScopeForJavaPackage@97
    classes('withWhen': Name@89) = null // through LazyPackageFragmentScopeForJavaPackage@97
    deserializedPackageScope = Empty@90 // through LazyPackageFragmentScopeForJavaPackage@97
    functions('IllegalStateException': Name@82) = EmptyList@91[empty] // through LazyPackageFragmentScopeForJavaPackage@97
    functions('equals': Name@86) = EmptyList@91[empty] // through LazyPackageFragmentScopeForJavaPackage@97
    functions('minus': Name@87) = EmptyList@91[empty] // through LazyPackageFragmentScopeForJavaPackage@97
    functions('withWhen': Name@89) = EmptyList@91[empty] // through LazyPackageFragmentScopeForJavaPackage@97
    memberIndex = computeMemberIndex$1@98 // through LazyPackageFragmentScopeForJavaPackage@97
}
