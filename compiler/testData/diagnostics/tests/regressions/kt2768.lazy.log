DescriptorResolver@0 {
    <name not found> = ByteValue@1
    <name not found> = IntValue@2
    <name not found> = IntValue@3
    <name not found> = ShortValue@4
}

LazyJavaClassDescriptor@5['AssertionError'] {
    constructors = ArrayList@6[10] { JavaConstructorDescriptor@7['<init>'], JavaConstructorDescriptor@8['<init>'], JavaConstructorDescriptor@9['<init>'], ... } // through LazyJavaClassMemberScope@10
    defaultType = JetTypeImpl@11['AssertionError']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@12['AssertionError']
}

LazyJavaClassDescriptor@13['Error'] {
    typeConstructor = LazyJavaClassTypeConstructor@14['Error']
}

LazyJavaClassTypeConstructor@12['AssertionError'] {
    parameters = ArrayList@15[empty]
    supertypes = ArrayList@16[1] { LazyJavaClassifierType@17['Error'] }
}

LazyJavaClassTypeConstructor@14['Error'] {
    parameters = ArrayList@18[empty]
    supertypes = ArrayList@19[1] { LazyJavaClassifierType@20['Throwable'] }
}

LazyJavaClassifierType@17['Error'] {
    arguments = ArrayList@21[empty]
    classifier = JavaClassImpl@22['Error']
    typeConstructor = LazyJavaClassTypeConstructor@14['Error']
}

LazyJavaClassifierType@23['Object'] {
    arguments = ArrayList@24[empty]
    classifier = JavaClassImpl@25['Object']
    nullable = 'false': Boolean@26
    typeConstructor = DeserializedClassTypeConstructor@27
}

LazyJavaClassifierType@28['Object'] {
    arguments = ArrayList@29[empty]
    classifier = JavaClassImpl@25['Object']
    nullable = 'true': Boolean@30
    typeConstructor = DeserializedClassTypeConstructor@27
}

LazyJavaClassifierType@31['String'] {
    arguments = ArrayList@32[empty]
    classifier = JavaClassImpl@33['String']
    nullable = 'false': Boolean@26
    typeConstructor = DeserializedClassTypeConstructor@34
}

LazyJavaClassifierType@35['String'] {
    arguments = ArrayList@36[empty]
    classifier = JavaClassImpl@37['String']
    nullable = 'false': Boolean@26
    typeConstructor = DeserializedClassTypeConstructor@34
}

LazyJavaClassifierType@38['String'] {
    arguments = ArrayList@39[empty]
    classifier = JavaClassImpl@33['String']
    nullable = 'true': Boolean@30
    typeConstructor = DeserializedClassTypeConstructor@34
}

LazyJavaClassifierType@40['String'] {
    arguments = ArrayList@41[empty]
    classifier = JavaClassImpl@37['String']
    nullable = 'true': Boolean@30
    typeConstructor = DeserializedClassTypeConstructor@34
}

LazyJavaClassifierType@42['Throwable'] {
    arguments = ArrayList@43[empty]
    classifier = JavaClassImpl@44['Throwable']
    nullable = 'false': Boolean@26
    typeConstructor = DeserializedClassTypeConstructor@45
}

LazyJavaClassifierType@46['Throwable'] {
    arguments = ArrayList@47[empty]
    classifier = JavaClassImpl@44['Throwable']
    nullable = 'true': Boolean@30
    typeConstructor = DeserializedClassTypeConstructor@45
}

LazyJavaClassifierType@20['Throwable'] {
    arguments = ArrayList@48[empty]
    classifier = JavaClassImpl@49['Throwable']
    typeConstructor = DeserializedClassTypeConstructor@45
}

LazyJavaPackageFragmentProvider@50 {
    packageFragments('<root>': FqName@51) = LazyJavaPackageFragment@52['<root>']
    packageFragments('Array': FqName@53) = null
    packageFragments('Byte': FqName@54) = null
    packageFragments('Short': FqName@55) = null
    packageFragments('String': FqName@56) = null
    packageFragments('T': FqName@57) = null
    packageFragments('java': FqName@58) = LazyJavaPackageFragment@59['java']
    packageFragments('java.lang': FqName@60) = LazyJavaPackageFragment@61['lang']
    packageFragments('java.lang.Array': FqName@62) = null
    packageFragments('java.lang.Byte': FqName@63) = null
    packageFragments('java.lang.Short': FqName@64) = null
    packageFragments('java.lang.String': FqName@65) = null
    packageFragments('java.lang.T': FqName@66) = null
    packageFragments('kotlin': FqName@67) = null
    packageFragments('kotlin.Array': FqName@68) = null
    packageFragments('kotlin.Byte': FqName@69) = null
    packageFragments('kotlin.Short': FqName@70) = null
    packageFragments('kotlin.String': FqName@71) = null
    packageFragments('kotlin.T': FqName@72) = null
    packageFragments('kotlin.io': FqName@73) = null
    packageFragments('kotlin.jvm': FqName@74) = null
    topLevelClasses(JavaClassImpl@75['AssertionError']) = LazyJavaClassDescriptor@5['AssertionError']
    topLevelClasses(JavaClassImpl@22['Error']) = LazyJavaClassDescriptor@13['Error']
}

LazyJavaPackageFragment@52['<root>'] {
    classes('Array': Name@76) = null // through LazyPackageFragmentScopeForJavaPackage@77
    classes('AssertionError': Name@78) = null // through LazyPackageFragmentScopeForJavaPackage@77
    classes('Byte': Name@79) = null // through LazyPackageFragmentScopeForJavaPackage@77
    classes('Short': Name@80) = null // through LazyPackageFragmentScopeForJavaPackage@77
    classes('String': Name@81) = null // through LazyPackageFragmentScopeForJavaPackage@77
    classes('assertEquals': Name@82) = null // through LazyPackageFragmentScopeForJavaPackage@77
    classes('equals': Name@83) = null // through LazyPackageFragmentScopeForJavaPackage@77
    classes('minus': Name@84) = null // through LazyPackageFragmentScopeForJavaPackage@77
    classes('toByte': Name@85) = null // through LazyPackageFragmentScopeForJavaPackage@77
    classes('toInt': Name@86) = null // through LazyPackageFragmentScopeForJavaPackage@77
    classes('toShort': Name@87) = null // through LazyPackageFragmentScopeForJavaPackage@77
    deserializedPackageScope = Empty@88 // through LazyPackageFragmentScopeForJavaPackage@77
    functions('AssertionError': Name@78) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@77
    functions('assertEquals': Name@82) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@77
    functions('equals': Name@83) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@77
    functions('minus': Name@84) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@77
    functions('toByte': Name@85) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@77
    functions('toInt': Name@86) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@77
    functions('toShort': Name@87) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@77
    memberIndex = computeMemberIndex$1@90 // through LazyPackageFragmentScopeForJavaPackage@77
}

LazyJavaPackageFragment@59['java'] {
    classes('lang': Name@91) = null // through LazyPackageFragmentScopeForJavaPackage@92
    deserializedPackageScope = Empty@88 // through LazyPackageFragmentScopeForJavaPackage@92
    functions('lang': Name@93) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@92
    memberIndex = computeMemberIndex$1@94 // through LazyPackageFragmentScopeForJavaPackage@92
}

LazyJavaPackageFragment@61['lang'] {
    classes('AssertionError': Name@78) = LazyJavaClassDescriptor@5['AssertionError'] // through LazyPackageFragmentScopeForJavaPackage@95
    classes('assertEquals': Name@82) = null // through LazyPackageFragmentScopeForJavaPackage@95
    classes('equals': Name@83) = null // through LazyPackageFragmentScopeForJavaPackage@95
    classes('minus': Name@84) = null // through LazyPackageFragmentScopeForJavaPackage@95
    classes('toByte': Name@85) = null // through LazyPackageFragmentScopeForJavaPackage@95
    classes('toInt': Name@86) = null // through LazyPackageFragmentScopeForJavaPackage@95
    classes('toShort': Name@87) = null // through LazyPackageFragmentScopeForJavaPackage@95
    deserializedPackageScope = Empty@88 // through LazyPackageFragmentScopeForJavaPackage@95
    functions('AssertionError': Name@78) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@95
    functions('assertEquals': Name@82) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@95
    functions('equals': Name@83) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@95
    functions('minus': Name@84) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@95
    functions('toByte': Name@85) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@95
    functions('toInt': Name@86) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@95
    functions('toShort': Name@87) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@95
    memberIndex = computeMemberIndex$1@96 // through LazyPackageFragmentScopeForJavaPackage@95
}
