LazyJavaClassDescriptor@0['Base'] {
    _typeConstructor = LazyJavaClassTypeConstructor@1['Base']
}

LazyJavaClassDescriptor@2['Exception'] {
    _constructors = ArrayList@3[5] { JavaConstructorDescriptor@4['<init>'], JavaConstructorDescriptor@5['<init>'], JavaConstructorDescriptor@6['<init>'], ... } // through LazyJavaClassMemberScope@7
    _functionTypeForSamInterface = null
    _typeConstructor = LazyJavaClassTypeConstructor@8['Exception']
    defaultType = JetTypeImpl@9['Exception']
}

LazyJavaClassDescriptor@10['HS'] {
    _constructors = ArrayList@11[1] { JavaConstructorDescriptor@12['<init>'] } // through LazyJavaClassMemberScope@13
    _functionTypeForSamInterface = null
    _typeConstructor = LazyJavaClassTypeConstructor@14['HS']
    defaultType = JetTypeImpl@15['HS<1>']
}

LazyJavaClassDescriptor@16['HashSet'] {
    _functionTypeForSamInterface = null
}

LazyJavaClassTypeConstructor@1['Base'] {
    _parameters = ArrayList@17[1] { LazyJavaTypeParameterDescriptor@18['T'] }
    _supertypes = ArrayList@19[1] { JetTypeImpl@20['Any'] }
}

LazyJavaClassTypeConstructor@8['Exception'] {
    _parameters = ArrayList@21[empty]
    _supertypes = ArrayList@22[1] { LazyJavaClassifierType@23['Throwable'] }
}

LazyJavaClassTypeConstructor@14['HS'] {
    _parameters = ArrayList@24[1] { LazyJavaTypeParameterDescriptor@25['T'] }
    _supertypes = ArrayList@26[1] { LazyJavaClassifierType@27['Base<T>'] }
}

LazyJavaClassifierType@27['Base<T>'] {
    _arguments = ArrayList@28[1] { TypeProjectionImpl@29 }
    _memberScope = SubstitutingScope@30
    _nullable = 'false': Boolean@31
    _typeConstructor = LazyJavaClassTypeConstructor@1['Base']
    classifier = JavaClassImpl@32['Base']
}

LazyJavaClassifierType@33['Object'] {
    _typeConstructor = DeserializedClassTypeConstructor@34
    classifier = JavaClassImpl@35['Object']
}

LazyJavaClassifierType@36['String'] {
    _arguments = ArrayList@37[empty]
    _nullable = 'false': Boolean@31
    _typeConstructor = DeserializedClassTypeConstructor@38
    classifier = JavaClassImpl@39['String']
}

LazyJavaClassifierType@40['String'] {
    _arguments = ArrayList@41[empty]
    _nullable = 'false': Boolean@31
    _typeConstructor = DeserializedClassTypeConstructor@38
    classifier = JavaClassImpl@42['String']
}

LazyJavaClassifierType@43['String'] {
    _arguments = ArrayList@44[empty]
    _nullable = 'false': Boolean@31
    _typeConstructor = DeserializedClassTypeConstructor@38
    classifier = JavaClassImpl@45['String']
}

LazyJavaClassifierType@46['String'] {
    _arguments = ArrayList@47[empty]
    _nullable = 'true': Boolean@48
    _typeConstructor = DeserializedClassTypeConstructor@38
    classifier = JavaClassImpl@42['String']
}

LazyJavaClassifierType@49['String'] {
    _arguments = ArrayList@50[empty]
    _nullable = 'true': Boolean@48
    _typeConstructor = DeserializedClassTypeConstructor@38
    classifier = JavaClassImpl@39['String']
}

LazyJavaClassifierType@51['String'] {
    _arguments = ArrayList@52[empty]
    _nullable = 'true': Boolean@48
    _typeConstructor = DeserializedClassTypeConstructor@38
    classifier = JavaClassImpl@45['String']
}

LazyJavaClassifierType@53['T'] {
    _arguments = ArrayList@54[empty]
    _nullable = 'false': Boolean@31
    _typeConstructor = AbstractLazyTypeParameterDescriptor$1@55
    classifier = JavaTypeParameterImpl@56['T']
}

LazyJavaClassifierType@57['T'] {
    _arguments = ArrayList@58[empty]
    _nullable = 'true': Boolean@48
    _typeConstructor = AbstractLazyTypeParameterDescriptor$1@55
    classifier = JavaTypeParameterImpl@56['T']
}

LazyJavaClassifierType@59['Throwable'] {
    _arguments = ArrayList@60[empty]
    _nullable = 'false': Boolean@31
    _typeConstructor = DeserializedClassTypeConstructor@61
    classifier = JavaClassImpl@62['Throwable']
}

LazyJavaClassifierType@63['Throwable'] {
    _arguments = ArrayList@64[empty]
    _nullable = 'false': Boolean@31
    _typeConstructor = DeserializedClassTypeConstructor@61
    classifier = JavaClassImpl@65['Throwable']
}

LazyJavaClassifierType@66['Throwable'] {
    _arguments = ArrayList@67[empty]
    _nullable = 'false': Boolean@31
    _typeConstructor = DeserializedClassTypeConstructor@61
    classifier = JavaClassImpl@68['Throwable']
}

LazyJavaClassifierType@69['Throwable'] {
    _arguments = ArrayList@70[empty]
    _nullable = 'true': Boolean@48
    _typeConstructor = DeserializedClassTypeConstructor@61
    classifier = JavaClassImpl@62['Throwable']
}

LazyJavaClassifierType@71['Throwable'] {
    _arguments = ArrayList@72[empty]
    _nullable = 'true': Boolean@48
    _typeConstructor = DeserializedClassTypeConstructor@61
    classifier = JavaClassImpl@68['Throwable']
}

LazyJavaClassifierType@73['Throwable'] {
    _arguments = ArrayList@74[empty]
    _nullable = 'true': Boolean@48
    _typeConstructor = DeserializedClassTypeConstructor@61
    classifier = JavaClassImpl@65['Throwable']
}

LazyJavaClassifierType@23['Throwable'] {
    _arguments = ArrayList@75[empty]
    _typeConstructor = DeserializedClassTypeConstructor@61
    classifier = JavaClassImpl@76['Throwable']
}

LazyJavaPackageFragmentProvider@77 {
    _packageFragments('<root>': FqName@78) = LazyJavaPackageFragment@79['<root>']
    _packageFragments('Base': FqName@80) = null
    _packageFragments('C': FqName@81) = null
    _packageFragments('HS': FqName@82) = null
    _packageFragments('Int': FqName@83) = null
    _packageFragments('T': FqName@84) = null
    _packageFragments('foo': FqName@85) = LazyJavaPackageFragment@86['foo']
    _packageFragments('foo.Base': FqName@87) = null
    _packageFragments('foo.C': FqName@88) = null
    _packageFragments('foo.HS': FqName@89) = null
    _packageFragments('foo.Int': FqName@90) = null
    _packageFragments('foo.T': FqName@91) = null
    _packageFragments('java': FqName@92) = LazyJavaPackageFragment@93['java']
    _packageFragments('java.lang': FqName@94) = LazyJavaPackageFragment@95['lang']
    _packageFragments('java.lang.Base': FqName@96) = null
    _packageFragments('java.lang.C': FqName@97) = null
    _packageFragments('java.lang.HS': FqName@98) = null
    _packageFragments('java.lang.Int': FqName@99) = null
    _packageFragments('java.lang.T': FqName@100) = null
    _packageFragments('java.util': FqName@101) = LazyJavaPackageFragment@102['util']
    _packageFragments('java.util.HashSet': FqName@103) = null
    _packageFragments('kotlin': FqName@104) = null
    _packageFragments('kotlin.Base': FqName@105) = null
    _packageFragments('kotlin.C': FqName@106) = null
    _packageFragments('kotlin.HS': FqName@107) = null
    _packageFragments('kotlin.Int': FqName@108) = null
    _packageFragments('kotlin.T': FqName@109) = null
    _packageFragments('kotlin.io': FqName@110) = null
    _packageFragments('kotlin.jvm': FqName@111) = null
    topLevelClasses(JavaClassImpl@112['Base']) = LazyJavaClassDescriptor@0['Base']
    topLevelClasses(JavaClassImpl@113['Exception']) = LazyJavaClassDescriptor@2['Exception']
    topLevelClasses(JavaClassImpl@114['HS']) = LazyJavaClassDescriptor@10['HS']
    topLevelClasses(JavaClassImpl@115['HashSet']) = LazyJavaClassDescriptor@16['HashSet']
}

LazyJavaPackageFragment@79['<root>'] {
    _functions('Exception': Name@116) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@118
    _functions('HS': Name@119) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@118
    _functions('convert': Name@120) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@118
    _functions('foo': Name@121) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@118
    _functions('java': Name@122) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@118
    classes('Base': Name@123) = null // through LazyPackageFragmentScopeForJavaPackage@118
    classes('Exception': Name@116) = null // through LazyPackageFragmentScopeForJavaPackage@118
    classes('HS': Name@124) = null // through LazyPackageFragmentScopeForJavaPackage@118
    classes('HashSet': Name@125) = null // through LazyPackageFragmentScopeForJavaPackage@118
    classes('Int': Name@126) = null // through LazyPackageFragmentScopeForJavaPackage@118
    classes('convert': Name@120) = null // through LazyPackageFragmentScopeForJavaPackage@118
    classes('foo': Name@127) = null // through LazyPackageFragmentScopeForJavaPackage@118
    classes('java': Name@128) = null // through LazyPackageFragmentScopeForJavaPackage@118
    deserializedPackageScope = Empty@129 // through LazyPackageFragmentScopeForJavaPackage@118
    memberIndex = computeMemberIndex$1@130 // through LazyPackageFragmentScopeForJavaPackage@118
}

LazyJavaPackageFragment@86['foo'] {
    _functions('Exception': Name@116) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@131
    _functions('HS': Name@119) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@131
    _functions('convert': Name@120) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@131
    classes('Base': Name@123) = LazyJavaClassDescriptor@0['Base'] // through LazyPackageFragmentScopeForJavaPackage@131
    classes('Exception': Name@116) = null // through LazyPackageFragmentScopeForJavaPackage@131
    classes('HS': Name@124) = LazyJavaClassDescriptor@10['HS'] // through LazyPackageFragmentScopeForJavaPackage@131
    classes('Int': Name@126) = null // through LazyPackageFragmentScopeForJavaPackage@131
    classes('convert': Name@120) = null // through LazyPackageFragmentScopeForJavaPackage@131
    deserializedPackageScope = Empty@129 // through LazyPackageFragmentScopeForJavaPackage@131
    memberIndex = computeMemberIndex$1@132 // through LazyPackageFragmentScopeForJavaPackage@131
}

LazyJavaPackageFragment@93['java'] {
    _functions('lang': Name@133) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@134
    _functions('util': Name@135) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@134
    classes('lang': Name@136) = null // through LazyPackageFragmentScopeForJavaPackage@134
    classes('util': Name@137) = null // through LazyPackageFragmentScopeForJavaPackage@134
    deserializedPackageScope = Empty@129 // through LazyPackageFragmentScopeForJavaPackage@134
    memberIndex = computeMemberIndex$1@138 // through LazyPackageFragmentScopeForJavaPackage@134
}

LazyJavaPackageFragment@95['lang'] {
    _functions('Exception': Name@116) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@139
    _functions('HS': Name@119) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@139
    _functions('convert': Name@120) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@139
    classes('Exception': Name@116) = LazyJavaClassDescriptor@2['Exception'] // through LazyPackageFragmentScopeForJavaPackage@139
    classes('HS': Name@119) = null // through LazyPackageFragmentScopeForJavaPackage@139
    classes('convert': Name@120) = null // through LazyPackageFragmentScopeForJavaPackage@139
    deserializedPackageScope = Empty@129 // through LazyPackageFragmentScopeForJavaPackage@139
    memberIndex = computeMemberIndex$1@140 // through LazyPackageFragmentScopeForJavaPackage@139
}

LazyJavaPackageFragment@102['util'] {
    _functions('HashSet': Name@141) = EmptyList@117[empty] // through LazyPackageFragmentScopeForJavaPackage@142
    classes('HashSet': Name@143) = LazyJavaClassDescriptor@16['HashSet'] // through LazyPackageFragmentScopeForJavaPackage@142
    deserializedPackageScope = Empty@129 // through LazyPackageFragmentScopeForJavaPackage@142
    memberIndex = computeMemberIndex$1@144 // through LazyPackageFragmentScopeForJavaPackage@142
}

LazyJavaTypeParameterDescriptor@25['T'] {
    defaultType = JetTypeImpl@145['T']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@55
    upperBounds = LinkedHashSet@146[1] { NullableType@147 }
}

LazyJavaTypeParameterDescriptor@18['T'] {
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@148
}

LazyJavaTypeParameterResolver@149 {
    resolve(JavaTypeParameterImpl@150['T']) = LazyJavaTypeParameterDescriptor@25['T']
}

LazyJavaTypeParameterResolver@151 {
    resolve(JavaTypeParameterImpl@152['T']) = LazyJavaTypeParameterDescriptor@18['T']
}
