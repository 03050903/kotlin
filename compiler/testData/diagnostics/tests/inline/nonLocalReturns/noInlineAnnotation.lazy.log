LazyAnnotationDescriptor@0 {
    _resolutionResults = OverloadResolutionResultsImpl@2
    _type = JetTypeImpl@1
    _valueArguments(ValueParameterDescriptorImpl@3['strategy']) = null
}

LazyAnnotationDescriptor@4 {
    _resolutionResults = OverloadResolutionResultsImpl@6
    _type = JetTypeImpl@5
}

LazyJavaPackageFragmentProvider@20 {
    _packageFragments('<root>': FqName@21) = LazyJavaPackageFragment@7['<root>']
    _packageFragments('Array': FqName@29) = null
    _packageFragments('String': FqName@32) = null
    _packageFragments('Unit': FqName@35) = null
    _packageFragments('inline': FqName@38) = null
    _packageFragments('java': FqName@22) = LazyJavaPackageFragment@23['java']
    _packageFragments('java.lang': FqName@24) = LazyJavaPackageFragment@25['lang']
    _packageFragments('java.lang.Array': FqName@31) = null
    _packageFragments('java.lang.String': FqName@34) = null
    _packageFragments('java.lang.Unit': FqName@37) = null
    _packageFragments('java.lang.inline': FqName@40) = null
    _packageFragments('java.lang.noinline': FqName@43) = null
    _packageFragments('kotlin': FqName@26) = null
    _packageFragments('kotlin.Array': FqName@30) = null
    _packageFragments('kotlin.String': FqName@33) = null
    _packageFragments('kotlin.Unit': FqName@36) = null
    _packageFragments('kotlin.inline': FqName@39) = null
    _packageFragments('kotlin.io': FqName@28) = null
    _packageFragments('kotlin.jvm': FqName@27) = null
    _packageFragments('kotlin.noinline': FqName@42) = null
    _packageFragments('noinline': FqName@41) = null
}

LazyJavaPackageFragment@7['<root>'] {
    _functions('invoke': Name@19) = EmptyList@16[empty] // through LazyPackageFragmentScopeForJavaPackage@9
    _functions('lambda': Name@18) = EmptyList@16[empty] // through LazyPackageFragmentScopeForJavaPackage@9
    _functions('test': Name@15) = EmptyList@16[empty] // through LazyPackageFragmentScopeForJavaPackage@9
    classes('Array': Name@8) = null // through LazyPackageFragmentScopeForJavaPackage@9
    classes('String': Name@10) = null // through LazyPackageFragmentScopeForJavaPackage@9
    classes('Unit': Name@11) = null // through LazyPackageFragmentScopeForJavaPackage@9
    classes('inline': Name@12) = null // through LazyPackageFragmentScopeForJavaPackage@9
    classes('invoke': Name@19) = null // through LazyPackageFragmentScopeForJavaPackage@9
    classes('lambda': Name@18) = null // through LazyPackageFragmentScopeForJavaPackage@9
    classes('noinline': Name@17) = null // through LazyPackageFragmentScopeForJavaPackage@9
    classes('test': Name@15) = null // through LazyPackageFragmentScopeForJavaPackage@9
    deserializedPackageScope = JetScope$1@13 // through LazyPackageFragmentScopeForJavaPackage@9
    memberIndex = computeMemberIndex$1@14 // through LazyPackageFragmentScopeForJavaPackage@9
}

LazyJavaPackageFragment@23['java'] {
    _functions('lang': Name@49) = EmptyList@16[empty] // through LazyPackageFragmentScopeForJavaPackage@47
    classes('lang': Name@46) = null // through LazyPackageFragmentScopeForJavaPackage@47
    deserializedPackageScope = JetScope$1@13 // through LazyPackageFragmentScopeForJavaPackage@47
    memberIndex = computeMemberIndex$1@48 // through LazyPackageFragmentScopeForJavaPackage@47
}

LazyJavaPackageFragment@25['lang'] {
    _functions('invoke': Name@19) = EmptyList@16[empty] // through LazyPackageFragmentScopeForJavaPackage@44
    _functions('lambda': Name@18) = EmptyList@16[empty] // through LazyPackageFragmentScopeForJavaPackage@44
    _functions('test': Name@15) = EmptyList@16[empty] // through LazyPackageFragmentScopeForJavaPackage@44
    classes('invoke': Name@19) = null // through LazyPackageFragmentScopeForJavaPackage@44
    classes('lambda': Name@18) = null // through LazyPackageFragmentScopeForJavaPackage@44
    classes('test': Name@15) = null // through LazyPackageFragmentScopeForJavaPackage@44
    deserializedPackageScope = JetScope$1@13 // through LazyPackageFragmentScopeForJavaPackage@44
    memberIndex = computeMemberIndex$1@45 // through LazyPackageFragmentScopeForJavaPackage@44
}
